
import java.util.Scanner;  

public class Bankers{  
    private int need[][],allocate[][],claim[][],avail[][],np,nr;  
      
    private void input(){  
     Scanner sc=new Scanner(System.in);  
     System.out.print("Enter no. of processes and resources : ");  
     np=sc.nextInt();  //no. of process  
     nr=sc.nextInt();  //no. of resources  
     need=new int[np][nr];  //initializing arrays  
     claim=new int[np][nr];  
     allocate=new int[np][nr];  
     avail=new int[1][nr];  
       
     System.out.println("Enter allocation matrix -->");  
     for(int i=0;i<np;i++)  
          for(int j=0;j<nr;j++)  
         allocate[i][j]=sc.nextInt();  //allocation matrix  
        
     System.out.println("Enter claim matrix -->");  
     for(int i=0;i<np;i++)  
          for(int j=0;j<nr;j++)  
        	  claim[i][j]=sc.nextInt();  //max matrix  
        
        System.out.println("Enter available matrix -->");  
        for(int j=0;j<nr;j++)  
         avail[0][j]=sc.nextInt();  //available matrix  
          
        sc.close();  
    }  
      
    private int[][] calc_need(){  
       for(int i=0;i<np;i++)  
         for(int j=0;j<nr;j++)  //calculating need matrix  
          need[i][j]=claim[i][j]-allocate[i][j];  
         
       return need;  
    }  
   
    private boolean check(int i){  
       //checking if all resources for ith process can be allocated  
       for(int j=0;j<nr;j++)   
       if(avail[0][j]<need[i][j])  
          return false;  
     
    return true;  
    }  
  
    public void isSafe(){  
       input();  
       calc_need();  
       boolean done[]=new boolean[np];  
       int j=0;  
  
       while(j<np){  //until all process allocated  
       boolean allocated=false;  
       for(int i=0;i<np;i++)  
        if(!done[i] && check(i)){  //trying to allocate  
            for(int k=0;k<nr;k++)  
            avail[0][k]=avail[0][k]-need[i][k]+claim[i][k];  
         System.out.println("Allocated process : "+i);  
         allocated=done[i]=true;  
               j++;  
             }  
          if(!allocated) break;  //if no allocation  
       }  
       if(j==np)  //if all processes are allocated  
        System.out.println("\nSafely allocated");  
       else  
        System.out.println("All proceess cant be allocated safely");  
    }  
      
    public static void main(String[] args) {  
  new Bankers().isSafe();  
    }  
}  

/*
安全的例子
allocation matrix目前分配的矩阵              claim matrix最大需要矩阵         need(claim-allocation)还需要的资源矩阵    available matrix目前的资源
    R1   R2   R3                        R1   R2   R3                   R1   R2   R3                        R1   R2   R3
P1  1    0    0                     P1  3    2    2                P1  2    2    2                         0    1    1
P2  6    1    2                     P2  6    1    3                P2  0    0    1
P3  2    1    1                     P3  3    1    4                P3  1    0    3
P4  0    0    2                     P4  4    2    2                P4  4    2    0


死锁的例子
allocation matrix目前分配的矩阵              claim matrix最大需要矩阵         need(claim-allocation)还需要的资源矩阵    available matrix目前的资源
    R1   R2   R3                        R1   R2   R3                   R1   R2   R3                        R1   R2   R3
P1  2    0    1                     P1  3    2    2                P1  1    2    1                         0    1    1
P2  5    1    1                     P2  6    1    3                P2  1    0    2
P3  2    1    1                     P3  3    1    4                P3  1    0    3
P4  0    0    2                     P4  4    2    2                P4  4    2    0
*/
